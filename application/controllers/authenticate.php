<?php if(!defined('BASEPATH')) exit('No direct script access allowed');
class Authenticate extends CI_Controller {
	
	// private $email_code; // for email validation code generated by registration time
	
	public function __construct() {
		parent::__construct();
		
		$this->lh_view->set_frame('index');
		$this->lh_view->set_partial('header', 'modules/header');
		$this->lh_view->set_partial('footer', 'modules/footer');
	}
	
	public function token_test() {
		$this->load->library('lh_oauth');
		$token = $this->input->get('access_token');
		var_dump($token);
		$graph = json_decode(file_get_contents('https://graph.facebook.com/me?access_token='.$token));
		var_dump($graph->email);
		return;
		$user_id = $this->lh_oauth->getUser();
		if ($user_id) {
			try {
				$user_profile = $this->lh_oauth->api('/me','GET');
				echo "Name: " . $user_profile['name'];
				echo "Email: " . $user_profile['email'];
			} catch(FacebookApiException $e) {
				$login_url = $this->lh_oauth->getLoginUrl();
				echo 'Please <a href="' . $login_url . '">login.</a>';
				error_log($e->getType());
				error_log($e->getMessage());
			} 
		} else {
			$login_url = $this->lh_oauth->getLoginUrl();
			echo 'Please <a href="' . $login_url . '">login.</a>';
		}
		return;
		$data = array(
			'redirect_uri' => site_url('authenticate/oauth_facebook'),
			'scope' => 'email'
		);
		var_dump($this->lh_oauth->getLoginUrl($data));
		var_dump($this->lh_oauth->getUser());
	}
	
	public function oauth_facebook() {
		$this->load->library('lh_oauth');
		$oauth_user = $this->lh_oauth->user;
		// var_dump($oauth_user);
		// return;
		if ($oauth_user) {
			if ($this->User_model->is_exists(array('email' => $oauth_user['email']))) {
				if ($this->lh_authenticate->signup_login($oauth_user['email'])) {
					redirect('/');
				} else {
					redirect('/err');
				}
			} else {
				// 프로필 사진 저장
				$fb_img = file_get_contents('https://graph.facebook.com/'.$oauth_user['id'].'/picture?width=160&height=160');
				$upload_path = $this->config->item('img_path');
				// if (!is_really_writable($upload_path))
				// 	mkdir($upload_path);
				$fb_file = $_SERVER['DOCUMENT_ROOT'].$upload_path .'/'. md5($oauth_user['id']) . '.jpg';
				file_put_contents($fb_file, $fb_img);
				// 회원가입 이어서 진행
				$userdata = array(
					'user_email' 	=> $oauth_user['email'],
					'user_fname' 	=> $oauth_user['first_name'],
					'user_lname'	=> $oauth_user['last_name'],
					'user_profile'	=> str_replace($_SERVER['DOCUMENT_ROOT'], '', $fb_file)
				);
				$this->lh_view->set_value(array(
					'head_title'	=> 'Register',
					'type'			=> 'oauth',
					'userdata'		=> $userdata,
					'no_profile'	=> '/static/img/avatar.png'
				));
				$this->lh_view->set_partial('body', 'modules/signup');
				$this->lh_view->render();
				return;
			}
		} else {
			redirect('/blah2');
		}
	}
	
	public function signup() {
		if ($this->input->post()) {
			// 타입
			$this->load->model('Type_code_model');
			$type_code_id = $this->Type_code_model->find_one(array('reference' => 'users', 'key' => $this->input->post('type_code_key')))->id;
			// 비밀번호
			if (!function_exists('password_hash')) $this->load->helper('password');
			if ($this->input->post('type') === 'email') {
				$hash = password_hash($this->input->post('password'), PASSWORD_BCRYPT);
			} else {
				$hash = password_hash(md5(time().rand()), PASSWORD_BCRYPT); // 소셜로그인은 비밀번호가 의미가 없고, 임시로 난수를 할당한다
			}
			// 과목선택
			$subject_option = implode('|', array(
				$this->input->post('subject-korean'),
				$this->input->post('subject-math'),
				$this->input->post('subject-english'),
				$this->input->post('subject-select')
			));
			$description = ($this->input->post('description')) ? $this->input->post('description') : '';
			$facebook_link = ($this->input->post('facebook_link')) ? $this->input->post('facebook_link') : '';
    // $profile_image = str_replace('http://www.lh.net', '', $this->input->post('profile'));
			$profile_image = str_replace($this->config->item('img_path').'/', '', $profile_image);
			$userdata = array(
				'type_code_id'	=> $type_code_id,
				'email'			=> $this->input->post('email'),
				'password'		=> $hash,
				'nickname'		=> $this->input->post('nickname'),
				'mypage_url'	=> $this->input->post('mypage'),
				'bio'			=> $this->input->post('bio'),
				'status'		=> 'Y', // 'N'
				// 메타데이터
				'profile_image'	=> $profile_image,
				'subject_option'=> $subject_option,
				'auto_creation'	=> 'Y',
				'description'	=> $description,
				'facebook_link' => $facebook_link
			);
			
			if ($this->lh_user->add($userdata)) {
				// TODO send validation email
				$this->lh_authenticate->signup_login($this->input->post('email'));
				$results = array(
					'result' => true,
					'name' => $this->input->post('nickname')
				);
			} else {
				$results = array(
					'result' => false,
					'message' => array('save' => '회원가입 중 문제가 발생했습니다. 다시 시도해 주세요.')
				);
			}
			$this->output->set_content_type('application/json');
			$this->output->set_output(json_encode($results));
			return;
		} else {
			$this->load->library('lh_oauth');
			$data = array(
				'redirect_uri' => site_url('authenticate/oauth_facebook'),
				'scope' => 'email'
			);
			redirect($this->lh_oauth->getLoginUrl($data));
		}
	}
	public function login() {
		if ($this->input->post()) {
			$email = $this->input->post('email');
			$password = $this->input->post('password');
			$return_url = $this->input->post('return_url');
			
			if ($this->lh_authenticate->login($email, $password)) {
				// TODO 이메일 인증 여부에 따른 분기가 한번더 필요함
				if ($return_url) {
					$result = array( 'result' => true, 'type' => '2', 'return_url' => urldecode($return_url) );
				} else {
					switch($this->lh_user->get('type_code_key')) {
						case 'student':
						case 'general':
							$result = array( 'result' => true, 'type' => '1' );
							break;
						case 'admin':
							$result = array( 'result' => true, 'type' => '0' );
							break;
					}
				}
			} else {
				$result = array(
					'result' => false,
					'type' => '-1',
					'message' => '<img src="/static/img/invalid.png" /> 아이디와 비밀번호를 확인해주세요.'
				);
			}
			
			$this->output->set_content_type('application/json');
			$this->output->set_output(json_encode($result));
			return;
		}
		
		if ($this->lh_user->get('id')) redirect('/');
		
		if ($this->input->is_ajax_request()) {
			$this->lh_view->set_frame('empty');
			$return_url = $this->input->get('return_url');
			$this->lh_view->set_value('return_url', $return_url);
			$this->lh_view->set_partial('content', 'popups/login');
			$this->lh_view->render();
		} else {			
			$return_url = $this->input->get('return_url');
			$this->lh_view->set_value('head_title', 'Log In');
			$this->lh_view->set_value('return_url', $return_url);
			$this->lh_view->set_partial('body', 'modules/login');
			$this->lh_view->render();
		}
	}
	public function logout() {
		$this->lh_authenticate->logout();
		redirect('/', 'location');
	}
}
/* EOF */